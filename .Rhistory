ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey = Sys.getenv("API_KEY"))
outputAPI <- GET(url, query = query_list)
output <- fromJSON(rawToChar(outputAPI$content))
output <- output$results
output <- output[-c(4, 7:12)]
output$name <- toupper(output$name)
options <- merge(options, output, by = 'ticker')
options <- options[c(1, 12, 14, 15, 2:11)]
if (type != "all"){
if (toupper(type) %in% options$type){
options <- options %>%
filter(type == toupper(type))
}
# Otherwise, throw an informative error.
else {
message <- paste('ERROR: Argument for company was
not found in the type.
Returning all types.')
}
}
# Do nothing if the company value equals "all".
else {
output <- as.data.frame(options)
# Return the output data.frame.
return(output)
}
}
t <- type()
t <- type('etf')
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey = Sys.getenv("API_KEY"))
outputAPI <- GET(url, query = query_list)
output <- fromJSON(rawToChar(outputAPI$content))
output <- output$results
output <- output[-c(4, 7:12)]
output$name <- toupper(output$name)
options <- merge(options, output, by = 'ticker')
options <- options[c(1, 12, 14, 15, 2:11)]
type(cs)
type('cs')
type <- function(type = "all"){
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey = Sys.getenv("API_KEY"))
outputAPI <- GET(url, query = query_list)
output <- fromJSON(rawToChar(outputAPI$content))
output <- output$results
output <- output[-c(4, 7:12)]
output$name <- toupper(output$name)
options <- merge(options, output, by = 'ticker')
options <- options[c(1, 12, 14, 15, 2:11)]
if (type != "all"){
if (toupper(type) %in% options$type){
options <- options %>%
filter(type == toupper(type))
}
# Otherwise, throw an informative error.
else {
message <- paste('ERROR: Argument for company was
not found in the type.
Returning all types.')
}
}
# Do nothing if the company value equals "all".
else {
output <- as.data.frame(options)
# Return the output data.frame.
return(output)
}
}
type('unit')
type <- function(type = "all"){
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey = Sys.getenv("API_KEY"))
outputAPI <- GET(url, query = query_list)
output <- fromJSON(rawToChar(outputAPI$content))
output <- output$results
output <- output[-c(4, 7:12)]
output$name <- toupper(output$name)
options <- merge(options, output, by = 'ticker')
options <- options[c(1, 12, 14, 15, 2:11)]
if (type != "all"){
if (toupper(type) %in% options$type){
options <- options %>%
filter(type == toupper(type))
}
# Otherwise, throw an informative error.
else {
message <- paste('ERROR: Argument for company was
not found in the type.
Returning all types.')
}
}
# Do nothing if the company value equals "all".
else {
output <- as.data.frame(options)
# Return the output data.frame.
return(output)
}
}
U <- type('unit')
str(c)
attributes(c)
#Function for exchange
exchange <- function(exchange = "all"){
all <- company()
if (exchange != "all"){
if (toupper(exchange) %in% all$primary_exchange){
output <- all %>%
filter(primary_exchange == toupper(exchange))
}
else {
message <- paste('ERROR: Argument for exchange was
not found in the primary_exchange
column. Returning all
exchanges')
}
}
# Do nothing if the exchange value equals "all".
else {
all <- as.data.frame(all)
# Return the output data.frame.
return(all)
}
}
e <- exchange()
e <- exchange('xnys')
all <- exchange()
all <- exchange()
company <- function(company = "all"){
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey = Sys.getenv("API_KEY"))
outputAPI <- GET(url, query = query_list)
output <- fromJSON(rawToChar(outputAPI$content))
output <- output$results
output <- output[-c(4, 7:12)]
output <- rename(output, types = type)
output$name <- toupper(output$name)
options <- merge(options, output, by = 'ticker')
options <- options[c(1, 12, 14, 15, 2:11)]
if (company != "all"){
if (toupper(company) %in% options$ticker){
options <- options %>%
filter(ticker == toupper(company))
}
else if (toupper(company) %in% options$Name){
output <- options %>%
filter(Name == toupper(company))
}
# Otherwise, throw an informative error.
else {
message <- paste('ERROR: Argument for company was
not found in the ticker or the
name column. Returning all
companies.')
}
}
# Do nothing if the company value equals "all".
else {
output <- as.data.frame(options)
# Return the output data.frame.
return(output)
}
}
c <- company()
all <- exchange()
#Function for exchange
type <- function(type = "all"){
all <- exchange()
if (type != "all"){
if (toupper(type) %in% all$types){
output <- all %>%
filter(types == toupper(type))
}
else {
message <- paste('ERROR: Argument for exchange was
not found in the primary_exchange
column. Returning all
exchanges')
}
}
# Do nothing if the exchange value equals "all".
else {
all <- as.data.frame(all)
# Return the output data.frame.
return(all)
}
}
t <- type('cs')
bankAPI <- function(func,...){
if (func == "company"){
output <- company(...)
}
else if (func == "exchange"){
output <- exchange(...)
}
else if (func == "type"){
output <- type(...)
}
else {
stop("ERROR: Argument for func is not valid!")
}
# Return the output from the appropriate function.
return(output)
}
k <- bankAPI('type')
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol)
names <- rename(names, ticker = Symbol,
name = Name)
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- as_tibble(options[-c(2:3)])
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- as_tibble(names[-c(2:3)])
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- as_tibble(names[-c(3:5)])
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- as_tibble(names[-c(3:5)])
options <- merge(options, names, by = 'ticker')
View(options)
options <- options[c(1, 12, 14, 15, 2:11)]
View(options)
options <- options[c(1, 12, 2:11)]
#Function for company name
company <- function(company = "all"){
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- as_tibble(names[-c(3:5)])
options <- merge(options, names, by = 'ticker')
options <- options[c(1, 12, 2:11)]
if (company != "all"){
if (toupper(company) %in% options$ticker){
options <- options %>%
filter(ticker == toupper(company))
}
else if (toupper(company) %in% options$Name){
output <- options %>%
filter(Name == toupper(company))
}
# Otherwise, throw an informative error.
else {
message <- paste('ERROR: Argument for company was
not found in the ticker or the
name column. Returning all
companies.')
}
}
# Do nothing if the company value equals "all".
else {
output <- as.data.frame(options)
# Return the output data.frame.
return(output)
}
}
c <- company()
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$results)
options <- lapply(options, fun = toupper)
options <- lapply(options, fun = toupper())
options <- select(lapply(options, fun = toupper()))
options <- mutate_all(options, funs=toupper)
options <- options %>%
mutate(across(where(is.character), toupper))
#Function for exchange
exchange <- function(exchange = "all"){
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$results)
options <- options %>%
mutate(across(where(is.character), toupper))
if (exchange != "all"){
if (toupper(exchange) %in% options$primary_exchange){
output <- options %>%
filter(primary_exchange == toupper(exchange))
}
else {
message <- paste('ERROR: Argument for exchange was
not found in the primary_exchange
column. Returning all
exchanges')
}
}
# Do nothing if the exchange value equals "all".
else {
output <- as.data.frame(output)
# Return the output data.frame.
return(output)
}
}
e <- exchange()
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$results)
options <- options %>%
mutate(across(where(is.character), toupper))
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$results)
options <- options %>%
mutate(across(where(is.character), toupper))
options <- options %>% options[-c(4, 7:12)]
exchange <- function(exchange = "all"){
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$results)
options <- options %>%
mutate(across(where(is.character), toupper))
options <- as_tibble(options[-c(4, 7:12)])
url <- "https://api.polygon.io/v3/reference/tickers?active=true&limit=1000"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$results)
options <- options %>%
mutate(across(where(is.character), toupper))
options <- as_tibble(options[-c(4, 7:12)])
