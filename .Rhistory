knitr::opts_chunk$set(echo = TRUE)
cuisine <- c('Mediterranean', 'German', 'Greek', 'Mexican',
'African', 'Nordic')
base <- 'https://api.spoonacular.com/recipes/complexSearch?query='
for(i in 1:length(cuisine)) {
# Build the API URL with the new county code
API_URL <- paste0(base, cuisine[i])
# Store the raw and processed API results in temporary objects
temp_raw <- GET(API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content),
flatten = TRUE)
# Add the most recent results to your data frame
df <- rbind(df, temp_list$actualsTimeseries)
}
# Store the raw and processed API results in temporary objects
temp_raw <- GET (API_URL)
library(httr)
library(jsonlite)
cuisine <- c('Mediterranean', 'German', 'Greek', 'Mexican',
'African', 'Nordic')
base <- 'https://api.spoonacular.com/recipes/complexSearch?query='
for(i in 1:length(cuisine)) {
# Build the API URL with the new county code
API_URL <- paste0(base, cuisine[i])
# Store the raw and processed API results in temporary objects
temp_raw <- GET (API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content),
flatten = TRUE)
# Add the most recent results to your data frame
df <- rbind(df, temp_list$actualsTimeseries)
}
source("~/.active-rstudio-document")
counties <- c('01001', '01003', '01005')
base <- 'https://api.covidactnow.org/v2/county/'
county <- '06037'
info_key <- '.timeseries.json?apiKey=xyxyxy'
for(i in 1:length(counties)) {
# Build the API URL with the new county code
API_URL <- paste0(base, counties[i], info_key)
# Store the raw and processed API results in temporary objects
temp_raw <- GET(API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content), flatten = TRUE)
# Add the most recent results to your data frame
df <- rbind(df, temp_list$actualsTimeseries)
}
counties <- c('01001', '01003', '01005')
base <- 'https://api.covidactnow.org/v2/county/'
county <- '06037'
info_key <- '.timeseries.json?apiKey=xyxyxy'
for(i in 1:length(counties)) {
# Build the API URL with the new county code
API_URL <- paste0(base, counties[i], info_key)
# Store the raw and processed API results in temporary objects
temp_raw <- GET(API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content), flatten = TRUE)
# Add the most recent results to your data frame
df <- rbind(df, temp_list$actualsTimeseries)
}
counties <- c('01001', '01003', '01005')
base <- 'https://api.covidactnow.org/v2/county/'
county <- '06037'
info_key <- '.timeseries.json?apiKey=xyxyxy'
for(i in 1:length(counties)) {
# Build the API URL with the new county code
API_URL <- paste0(base, counties[i], info_key)
# Store the raw and processed API results in temporary objects
temp_raw <- GET(API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content), flatten = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
cuisine <- c('Mediterranean', 'German', 'Greek', 'Mexican',
'African', 'Nordic')
base <- 'https://api.spoonacular.com/recipes/complexSearch?query='
for(i in 1:length(cuisine)) {
# Build the API URL with the new county code
API_URL <- paste0(base, cuisine[i])
# Store the raw and processed API results in temporary objects
temp_raw <- GET (API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content),
flatten = TRUE)
# Add the most recent results to your data frame
df <- rbind(df, temp_list$actualsTimeseries)
}
cuisine <- c('Mediterranean', 'German', 'Greek', 'Mexican',
'African', 'Nordic')
base <- 'https://api.spoonacular.com/recipes/complexSearch?query='
for(i in 1:length(cuisine)) {
# Build the API URL with the new county code
API_URL <- paste0(base, cuisine[i])
# Store the raw and processed API results in temporary objects
temp_raw <- GET (API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content),
flatten = TRUE)
# Add the most recent results to your data frame
df <- data.frame(temp_list)
}
cuisine <- c('Mediterranean', 'German', 'Greek', 'Mexican',
'African', 'Nordic')
base <- 'https://api.spoonacular.com/recipes/complexSearch?query='
api_key <- 'a4a277c7c35b412bb62dcc0cbb7a60c6'
for(i in 1:length(cuisine)) {
# Build the API URL with the new county code
API_URL <- paste0(base, cuisine[i])
# Store the raw and processed API results in temporary objects
temp_raw <- GET (API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content),
flatten = TRUE)
# Add the most recent results to your data frame
df <- data.frame(temp_list)
df <- rbind(df, temp_list$actualsTimeseries)
}
cuisine <- c('Mediterranean', 'German', 'Greek', 'Mexican',
'African', 'Nordic')
base <- 'https://api.spoonacular.com/recipes/complexSearch?query='
api_key <- 'a4a277c7c35b412bb62dcc0cbb7a60c6'
for(i in 1:length(cuisine)) {
# Build the API URL with the new county code
API_URL <- paste0(base, cuisine[i], api_key)
# Store the raw and processed API results in temporary objects
temp_raw <- GET (API_URL)
temp_list <- fromJSON(rawToChar(temp_raw$content),
flatten = TRUE)
# Add the most recent results to your data frame
df <- data.frame(temp_list)
df <- rbind(df, temp_list$actualsTimeseries)
}
library(httr)
library(jsonlite)
GET (https://api.nasa.gov/neo/rest/v1/neo/3542519?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa)
GET (https:api.nasa.gov/neo/rest/v1/neo/3542519?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa)
GET (https:api.nasa.gov/neo/rest/v1/neo/3542519?api_key='uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
help("fromJSON")
GET (https:api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa)
GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(myData$content))
parsed <- fromJSON(rawToChar(my_data$content))
View(parsed)
str(parsed, max.level = 1)
str(parsed)
parsed$estimated_diameter %>%
colnames()
library(tidyverse)
parsed$estimated_diameter %>%
colnames()
parsed$estimated_diameter
parsed$'2015-09-08'
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
parsed$near_earth_objects %>%
col_names()
parsed$near_earth_objects %>%
colnames()
near_earth_objects <- parsed$near_earth_objects
near_earth_objects <- as_tibble(near_earth_objects)
View(near_earth_objects)
near_earth_objects = subset(near_earth_objects, select =
-c('links'))
near_earth_objects = subset(near_earth_objects, select =
-c(links))
View(near_earth_objects)
near_earth_objects <- select(near_earth_objects,
1, 4:5, 7, 10:11, 16, 18, 20:23,
40:41)
near_earth_objects <- select(near_earth_objects,
1, 4:5, 7, 10:11, 16, 18, 20:23)
View(near_earth_objects)
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
parsed$near_earth_objects %>%
colnames()
near_earth_objects <- parsed$near_earth_objects
near_earth_objects <- as_tibble(near_earth_objects)
near_earth_objects <- select(near_earth_objects,
2, 5:6, 8, 9:13)
View(near_earth_objects)
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
parsed$near_earth_objects$estimated_diameter$kilometers %>%
colnames()
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
est_diam <- parsed$near_earth_objects$estimated_diameter$kilometers
View(est_diam)
my_data <- GET ('https://api.nasa.gov/DONKI/FLR?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
View(parsed)
View(parsed[[2]][[1]])
my_data <- GET ('https://api.nasa.gov/DONKI/HSS?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/DONKI/HSS?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/planetary/apod?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/planetary/earth/assets?lon=-95.33&lat=29.78&date=2018-01-01&&dim=0.10&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/insight_weather/?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa&feedtype=json&ver=1.0')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/techtransfer/patent/?engine&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('http://www.omdbapi.com/?apikey=[dc397075]&http://www.omdbapi.com/apikey=[dc397075]=Forrest+Gump')
View(parsed)
my_data <- GET ('http://www.omdbapi.com/apikey=[dc397075]=Forrest+Gump')
my_data <- GET ('http://www.omdbapi.com/apikey=[dc397075]=Forrest+Gump')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('http://www.omdbapi.com/apikey=[dc397075]')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/neo/3542519?api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
View(parsed)
View(parsed)
View(parsed)
View(parsed)
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.spoonacular.com/recipes/complexSearch?query=pasta&maxFat=25&number=2')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.spoonacular.com/recipes/{id}/priceBreakdownWidget.json')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.spoonacular.com/recipes/{id}/priceBreakdownWidget.json')
parsed <- fromJSON(rawToChar(my_data$content))
parsed <- fromJSON(my_data$content)
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(my_data$content)
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
parsed <- fromJSON(rawToChar(my_data$content$near_earth_object
))
parsed <- fromJSON(rawToChar(my_data$content$near_earth_objects
))
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=uIJDeUj1QadZn7nD4KfQMfwKckVgznTGI9irVtBa')
parsed <- fromJSON(rawToChar(my_data$content))
near_earth <- parsed$near_earth_objects
View(near_earth)
near_earth <- as_tibble(near_earth)
View(near_earth)
GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023-01-09/2023-01-09?apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023-01-09/2023-01-09?apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(results)
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
View(parsed)
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2022-01-01/2023-01-01?adjusted=true&sort=asc&limit=120&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2022-01-01/2023-01-01?adjusted=true&sort=asc&limit=120&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(results)
my_data <- GET ('https://api.polygon.io/v2/aggs/ticker/AAPL & DIS/range/1/day/2022-01-01/2023-01-01?adjusted=true&sort=asc&limit=120&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
my_data <- GET ('https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(results)
my_data <- GET ('https://api.polygon.io/v3/reference/conditions?asset_class=stocks&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.polygon.io/v3/reference/conditions?asset_class=stocks&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(results)
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(results)
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawTOChar(my_data$content))
ticker <- function(ticker = 'all')
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawtoChar(my_data$content))
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(results)
View(results)
ticker <- function(ticker = 'all')
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
ticker <- function(ticker = 'all')
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
View(ticker)
ticker <- function(ticker = 'all')
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
if (ticker != "all"){
if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
else if (ticker %in% results$name){
results <- results %>%
filter(name == ticker)
}
else {
}
results <- suppressMessages(as.data.frame(
lapply(results,convertToNumeric)))
return(results)
}
ticker <- function(ticker = 'all')
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
if (ticker != "all"){
if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
else if (ticker %in% results$name){
results <- results %>%
filter(name == ticker)
}
else {
}
results <- suppressMessages(as.data.frame(
lapply(results,convertToNumeric)))
return(results)
}
View(results)
View(results)
ticker <- function(ticker = 'all')
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
if (ticker != "all"){
if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
else if (ticker %in% results$name){
results <- results %>%
filter(name == ticker)
}
else {
}
results <- suppressMessages(as.data.frame(
lapply(results,convertToNumeric)))
return(results)
}
path <- 'https://api.polygon.io/v3/reference/tickers?'
query <-  list(tickers = 'true', active = 'true')
response <- GET('https://api.polygon.io/v3/reference/tickers?',
query = query)
path <- 'https://api.polygon.io/v3/reference/tickers?'
query <-  list(tickers = 'dis', active = 'true')
response <- GET('https://api.polygon.io/v3/reference/tickers?',
query = query)
parsed <- fromJSON(rawToChar(response$content))
results <- parsed$results
path <- 'https://api.polygon.io/v3/reference/tickers?'
query <-  list(tickers = 'dis', active = 'true')
response <- GET('https://api.polygon.io/v3/reference/tickers?',
query = query)
parsed <- fromJSON(rawToChar(response$content))
results <- parsed$results
query.params <- list(ticker = "dis", sort = "forks")
response <- GET("https://api.polygon.io/v3/reference/tickers", query = query.params)
path <- 'https://api.polygon.io/v3/reference/tickers?'
API_key <- '_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT'
query <- query = list(ticker = 'dis', active = 'true',
apiKey = 'API_key')
path <- 'https://api.polygon.io/v3/reference/tickers?'
API_key <- '_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT'
query <- list(ticker = 'dis', active = 'true',
apiKey = 'API_key')
request <- GET(url = path, query)
parsed <- fromJSON(rawToChar(request$content))
results <- parsed$results
results
View(request)
View(request)
path <- 'https://api.polygon.io/v3/reference/tickers?'
API_key <- '_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT'
query <- list(ticker = 'dis', active = 'true',
apiKey = 'API_key')
request <- GET(url = path, query)
path <- 'https://api.polygon.io/v3/reference/tickers?'
API_key <- '_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT'
query <- list(ticker = 'dis', active = 'true',
apiKey = 'API_key')
request <- GET(url = path, query = query)
parsed <- fromJSON(rawToChar(request$content))
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
ticker <- function(ticker)
if (missing(ticker)){
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
}
if (team != "all")if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
ticker <- function(ticker)
if (missing(ticker)){
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
}
if (ticker != "all")if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
ticker <- function(ticker = "all")
if (missing(ticker)){
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
}
if (ticker != "all")if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
ticker <- function(ticker = "all")
if (missing(ticker)){
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
}
if (ticker != "all")if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
ticker <- function(ticker = "all")
if (missing(ticker)){
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
}
if (ticker != "all"){
if (ticker %in% results$ticker){
results <- results %>%
filter(ticker == ticker)
}
else if (ticker %in% results$name){
results <- results %>%
filter(name == ticker)
}
else {
}
results <- suppressMessages(as.data.frame(
lapply(results,convertToNumeric)))
return(results)
}
methods(subset)
view(subset)
subset
ticker <- function(results, ticker){
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- as.list(parsed$results)
new <- subset(results, ticker == ticker)
return(new)
}
ticker(results, ticker = "dis")
ticker <- function(results, ticker){
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
new <- subset(results, ticker == ticker)
return(new)
}
ticker(results, ticker = "dis")
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
ticker <- function(results, ticker){
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
View(my_data)
View(my_data)
my_data <- GET
('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
parsed <- fromJSON(rawToChar(my_data$content))
results <- parsed$results
my_data <- GET ('https://api.polygon.io/v3/reference/tickers?active=true&apiKey=_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT')
