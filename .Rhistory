# market_tab
#Contingency table for market by type
# type_tab <-
#   addmargins(table(fin$type))
# names(dimnames(type_tab)) <- c("FinancialInfo By Type")
# type_tab
market_tab <- knitr::kable(addmargins(table(fin_market$market,
caption=paste("Financial Info By Market"))
market_type_tab <- knitr::kable(addmargins(
type_tab <- knitr::kable(addmargins(table(fin_market$type)),
caption = paste("Financial Info By
Type"))
market_type_tab <-
knitr::kable(addmargins(table(fin_market$type,
fin_market$market)),
caption = paste("Financial Info By
Market and Type"))
#Create data frame for all tickers that had a percent change from the previous day. Tickers with a percent change of 0 are not included.
#Note: This data is cleared at 3:30am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST.
fin_comb <- finAPI('company_comb')
#Calculate averages
fin_comb <- mutate(fin_comb, AvgPerChange_Since_Prev =
mean(PerChange_Since_Prev),
AvgValChange_Since_Prev =
mean(ValChange_Sine_Prev),
AvgDay_Open_Price = mean(Day_Open_Price),
AvgDay_High_Price = mean(Day_High_Price),
AvgDay_Low_Price = mean(Day_Low_Price),
AvgDay_Close_Price = mean(Day_Close_Price),
AvgPrev_Open_Price = mean(Prev_Open_Price),
AvgPrev_High_Price = mean(Prev_High_Price),
AvgPrev_Low_Price = mean(Prev_Low_Price),
AvgPrev_Close_Price = mean(Prev_Close_Price))
fin_comb <- fin_comb[, c(1:5, 6, 16, 7, 17, 8, 18, 9, 19, 10,
20, 11, 21, 12, 22, 13, 23, 14, 24,
15, 25)]
head(fin_comb)
#Histogram
fin_comb <- finAPI("company_comb")
g <- ggplot(fin_comb, aes(Day_Low_Price,
y=after_stat(density),
fill=primary_exchange)) +
# Add a semi-transparent histogram with 10 bins for XNYS.
geom_histogram(data=subset(fin_comb,
primary_exchange == 'XNYS'),
bins=10, alpha = 0.5) +
# Add a semi-transparent histogram with 10 bins for XNAS.
geom_histogram(data=subset(fin_comb,
primary_exchange =='XNAS'),
bins=10, alpha = 0.5) +
# Add a better legend label.
guides(fill=guide_legend(title="Game Type")) +
# Add labels to the axes.
scale_x_continuous("Day Low Price") +
scale_y_continuous("Density") +
# Add a title.
ggtitle("Histogram of Day Low Price by Exchange")
g
#Histogram
fin_comb <- finAPI("company_comb")
g <- ggplot(fin_comb, aes(Day_Low_Price,
y=after_stat(density),
fill=primary_exchange)) +
# Add a semi-transparent histogram with 10 bins for XNYS.
geom_histogram(data=subset(fin_comb,
primary_exchange == 'XNYS'),
bins=10, alpha = 0.5) +
# Add a semi-transparent histogram with 10 bins for XNAS.
geom_histogram(data=subset(fin_comb,
primary_exchange =='XNAS'),
bins=10, alpha = 0.5) +
# Add a better legend label.
guides(fill=guide_legend(title="Exchange")) +
# Add labels to the axes.
scale_x_continuous("Day Low Price") +
scale_y_continuous("Density") +
# Add a title.
ggtitle("Histogram of Day Low Price by Exchange")
g
#Histogram
fin_comb <- finAPI("company_comb")
g <- ggplot(fin_comb, aes(Day_Low_Price,
y=after_stat(density),
fill=primary_exchange)) +
# Add a semi-transparent histogram with 10 bins for XNYS.
geom_histogram(data=subset(fin_comb,
primary_exchange == 'XNYS'),
bins=10, alpha = 0.5) +
# Add a semi-transparent histogram with 10 bins for XNAS.
geom_histogram(data=subset(fin_comb,
primary_exchange =='XNAS'),
bins=10, alpha = 0.5) +
# Add a better legend label.
guides(fill=guide_legend(title="Exchange")) +
# Add labels to the axes.
scale_x_continuous("Day Low Price") +
scale_y_continuous("Density") +
# Add a title.
ggtitle("Histogram of Day Low Price by Exchange") +
theme(plot.title=element_text(hjust=0.5))
g
View(fin_comb)
g <- ggplot(fin_comb, aes(Day_Low_Price,
y=after_stat(density),
fill=type))
g <- ggplot(fin_comb, aes(Day_Low_Price,
y=after_stat(density),
fill=type)) +
# Add a semi-transparent histogram with 10 bins for XNYS.
geom_histogram(data=subset()
fin_comb <- finAPI("company_comb")
fin_comb <- finAPI("company_comb")
g <- ggplot(fin_comb, aes(Day_Low_Price,
y=after_stat(density),
fill=type)) + geom_histogram()
g
View(fin_comb)
fin_comb <- finAPI("company_comb")
#Histogram for type
g <- ggplot(fin_comb, aes(PerChange_Since_Prev,
y=after_stat(density),
fill=type)) +
# Add a semi-transparent histogram with 10 bins for XNYS.
geom_histogram(data=subset(fin_comb,
type == 'CS'),
bins=10, alpha = 0.5) +
# Add a semi-transparent histogram with 10 bins for XNAS.
geom_histogram(data=subset(fin_comb,
type =='ETF'),
bins=10, alpha = 0.5) +
# Add a better legend label.
guides(fill=guide_legend(title="Type")) +
# Add labels to the axes.
scale_x_continuous("Percent Change Since Previous Day") +
scale_y_continuous("Density") +
# Add a title.
ggtitle("Histogram of Percent Change Since Previous Day By
Type") +
theme(plot.title=element_text(hjust=0.5))
g
fin_comb <- finAPI("company_comb")
#Histogram for type
g <- ggplot(fin_comb, aes(PerChange_Since_Prev,
y=after_stat(density),
fill=type)) +
# Add a semi-transparent histogram with 10 bins for XNYS.
geom_histogram(data=subset(fin_comb,
type == 'CS'),
bins=20, alpha = 0.5) +
# Add a semi-transparent histogram with 10 bins for XNAS.
geom_histogram(data=subset(fin_comb,
type =='ETF'),
bins=20, alpha = 0.5) +
# Add a better legend label.
guides(fill=guide_legend(title="Type")) +
# Add labels to the axes.
scale_x_continuous("Percent Change Since Previous Day") +
scale_y_continuous("Density") +
# Add a title.
ggtitle("Histogram of Percent Change Since Previous Day By
Type") +
theme(plot.title=element_text(hjust=0.5))
g
g <- ggplot(fin_comb,
aes(primary_exchange,
Day_High_Price,
color=primary_exchange)) +
# Add the box plot layer.
geom_boxplot() +
# Jitter the points to add a little more info to the boxplot.
geom_jitter() +
# Add labels to the axes.
scale_x_discrete("Exchange") +
scale_y_continuous("Day High Price") +
# Add a title.
ggtitle("Day High Price by Exchange") +
# Remove the legend because it isn't needed.
theme(legend.position="none")
# Display the plot.
plot4
g <- ggplot(fin_comb,
aes(primary_exchange,
Day_High_Price,
color=primary_exchange)) +
# Add the box plot layer.
geom_boxplot() +
# Jitter the points to add a little more info to the boxplot.
geom_jitter() +
# Add labels to the axes.
scale_x_discrete("Exchange") +
scale_y_continuous("Day High Price") +
# Add a title.
ggtitle("Day High Price by Exchange") +
# Remove the legend because it isn't needed.
theme(legend.position="none")
# Display the plot.
g
View(fin_comb)
fin_comb <- subset(fin_comb, primary_exchange == 'XNYS' |
primary_exchange == 'XNAS')
View(fin_comb)
fin_comb <- subset(fin_comb, primary_exchange == 'XNYS' |
primary_exchange == 'XNAS')
g <- ggplot(fin_comb,
aes(primary_exchange,
Day_High_Price,
color=primary_exchange)) +
# Add the box plot layer.
geom_boxplot() +
# Jitter the points to add a little more info to the boxplot.
geom_jitter() +
# Add labels to the axes.
scale_x_discrete("Exchange") +
scale_y_continuous("Day High Price") +
# Add a title.
ggtitle("Day High Price by Exchange") +
# Remove the legend because it isn't needed.
theme(legend.position="none")
# Display the plot.
g
fin_com <- company_comb()
#Scatterplot for companies with a percent growth greater than
#50%
fin_com <- company_comb()
ggplot(greater, aes(x=Day_Low_Price, y=Day_High_Price)) +
geom_point(size = 2,
position=position_jitter(width=3,height=2), color
= '#8b0a50') +
xlab('Lowest Price for the Day') +
ylab('Highest Price for the Day') +
labs(title = 'Scatterplot for Companies with a % Growth
Greater than 50%',
subtitle = 'x = Lowest Price for the Day
y = Highest Price for  the Day') +
theme(plot.title=element_text(hjust=0.5)) +
theme(plot.subtitle=element_text(hjust=0.5))
#Scatterplot for companies with a percent growth greater than
#50%
fin_com <- company_comb()
ggplot(fin_com, aes(x=Day_Low_Price, y=Day_High_Price)) +
geom_point(size = 2,
position=position_jitter(width=3,height=2), color
= '#8b0a50') +
xlab('Lowest Price for the Day') +
ylab('Highest Price for the Day') +
labs(title = 'Scatterplot for Companies with a % Growth
Greater than 50%',
subtitle = 'x = Lowest Price for the Day
y = Highest Price for  the Day') +
theme(plot.title=element_text(hjust=0.5)) +
theme(plot.subtitle=element_text(hjust=0.5))
#Scatterplot for companies with a percent growth greater than
#50%
fin_com <- company_comb()
g <- ggplot(fin_com, aes(x=Day_Low_Price, y=Day_High_Price))
g + geom_point(size = 2,
position=position_jitter(width=3,height=2), color
= '#8b0a50') +
xlab('Lowest Price for the Day') +
ylab('Highest Price for the Day') +
labs(title = 'Scatterplot for Lowest Price for the Day
vs. Highest Price for the Day') +
theme(plot.title=element_text(hjust=0.5))
g
#Scatterplot for companies with a percent growth greater than
#50%
fin_com <- company_comb()
ggplot(fin_com, aes(x=Day_Low_Price, y=Day_High_Price)) +
geom_point(size = 2,
position=position_jitter(width=3,height=2), color
= '#8b0a50') +
xlab('Lowest Price for the Day') +
ylab('Highest Price for the Day') +
labs(title = 'Scatterplot for Lowest Price for the Day
vs. Highest Price for the Day') +
theme(plot.title=element_text(hjust=0.5))
fin_comb <- fin(company_comb)
fin_comb <- finAPI(company_comb)
fin_comb <- finAPI('company_comb')
url <- 'https://api.polygon.io/v3/snapshot?type=stocks&limit=250'
query_list <- list(apiKey = Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
quantitative <- as.data.frame(parsed$results)
quantitative <- quantitative %>% unnest('session')
#Create data frame for snapshots for stocks
url <- 'https://api.polygon.io/v3/snapshot?type=stocks&limit=250'
query_list <- list(apiKey = Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
quantitative <- as.data.frame(parsed$results)
quantitative <- quantitative %>% unnest('session')
# Market, locale, primary exchange, type, and currency_name by
# ticker for stock
url <- "https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit=250"
my_data <- GET(url, query = query_list)
parsed2 <- fromJSON(rawToChar(my_data$content))
Categorical <- as.data.frame(parsed2$results)
#Combine data frames by ticker
Combined <- merge(x = quantitative,
y = Categorical,
by = "ticker")
Combined <- Combined[-c(2, 4, 15, 18:20, 23:28)]
Combined <- rename(Combined,
name = name.x,
type = type.y)
#Summarize price by type
Price_FiveNum <- combined %>%
# Select the type and price columns.
select(type, price) %>%
# Group by type.
group_by(type) %>%
# Get summary statistics for price.
summarize("Min." = min(price),
"Q1" = quantile(price, 0.25,
na.rm=TRUE),
"Median" = quantile(price, 0.5, na.rm=TRUE),
"Q3" = quantile(price, 0.75,
na.rm=TRUE),
"Max" = max(price))
#Summarize price by type
Price_FiveNum <- Combined %>%
# Select the type and price columns.
select(type, price) %>%
# Group by type.
group_by(type) %>%
# Get summary statistics for price.
summarize("Min." = min(price),
"Q1" = quantile(price, 0.25,
na.rm=TRUE),
"Median" = quantile(price, 0.5, na.rm=TRUE),
"Q3" = quantile(price, 0.75,
na.rm=TRUE),
"Max" = max(price))
Price_FiveNum <- knitr::kable(Price_FiveNum,
caption="Five-Number Summary for Price by Type",
digits=2)
Price_FiveNum
#Summarize change percent by type
ChangePer_FiveNum <- Combined %>%
# Select the type and price columns.
select(type, change_percent) %>%
# Group by type.
group_by(type) %>%
# Get summary statistics for price.
summarize("Min." = min(change_percent),
"Q1" = quantile(change_percent, 0.25,
na.rm=TRUE),
"Median" = quantile(change_percent, 0.5,
na.rm=TRUE),
"Q3" = quantile(change_percent, 0.75,
na.rm=TRUE),
"Max" = max(change_percent))
fin_comb <- finAPI('fin_comb')
fin_comb <- finAPI('company_comb')
#Summarize Day Open Price by Exchange
fin_comb <- finAPI('company_comb')
Open_FiveNum <- fin_comb %>%
# Select the type and price columns.
select(primary_exchange, Day_Open_Price) %>%
# Group by type.
group_by(primary_exchange) %>%
# Get summary statistics for price.
summarize("Min." = min(Day_Open_Price),
"Q1" = quantile(Day_Open_Price, 0.25,
na.rm=TRUE),
"Median" = quantile(Day_Open_Price, 0.5,
na.rm=TRUE),
"Q3" = quantile(Day_Open_Price, 0.75,
na.rm=TRUE),
"Max" = max(Day_Open_Price))
Open_FiveNum <- knitr::kable(Open_FiveNum,
caption="Five-Number Summary for Day Open Price
by Exchange",
digits=2)
Open_FiveNum
fin_market <- finAPI('market')
market_tab <- knitr::kable(addmargins(
table(fin_market$market), dimnames=c("market")),
caption=paste("Financial Info By Market"))
fin_market <- finAPI('market')
market_tab <- addmargins(table(fin_market$market))
colnames(market_tab) <- c("market", "freq")
fin_market <- finAPI('market')
market_tab <- addmargins(table(fin_market$market))
market_tab
fin_market <- finAPI('market')
market_tab <- addmargins(table(fin_market$market))
market_tab
names(dimnames(market_tab)) <- c("Financials By Market")
fin_market <- finAPI('market')
market_tab <- addmargins(table(fin_market$market))
names(dimnames(market_tab)) <- c("Financials By Market")
market_tab
#Contingency table for market
fin_market <- finAPI('market')
market_tab <- addmargins(table(fin_market$market))
names(dimnames(market_tab)) <- c("Market")
market_tab <- knitr::kable((market_tab),
caption=paste("Financial Info By Market"))
market_tab
type_tab <- addmargins(table(fin_market$type))
names(dimnames(type_tab)) <- c("Type")
type_tab <- knitr::kable((type_tab),
caption=paste("Financial Info By type"))
type_tab
market_type_tab <- addmargins(table(fin_market$type,
fin_market$market))
names(dimnames(type_tab)) <- c("Type", "Market")
names(dimnames(market_type_tab)) <- c("Type", "Market")
#Contingency table for market
fin_market <- finAPI('market')
market_tab <- addmargins(table(fin_market$market))
names(dimnames(market_tab)) <- c("Market")
market_tab <- knitr::kable((market_tab),
caption=paste("Financial Info By Market"))
market_tab
type_tab <- addmargins(table(fin_market$type))
names(dimnames(type_tab)) <- c("Type")
type_tab <- knitr::kable((type_tab),
caption=paste("Financial Info By type"))
type_tab
market_type_tab <- addmargins(table(fin_market$type,
fin_market$market))
names(dimnames(market_type_tab)) <- c("Type", "Market")
market_type_tab <- knitr::kable((market_type_tab),
caption=paste("Financial Info By type and
Market"))
market_type_tab
knitr::opts_chunk$set(echo = TRUE)
install.packages("rmarkdown")
install.packages("rmarkdown")
get(wd)
getwd()
library(jsonlite)
library(rmarkdown)
library(httr)
library(jsonlite)
library(tidyverse)
library(kableExtra)
library(ggplot2)
API_KEY <- Sys.setenv("API_KEY" =
"_aL5f5EmEje0vL6kYr1xOPtgR8e9rGwT")
#Function for company name quantitative
#DONT CHANGE THIS ONE
company_quan <- function(company = "all"){
getwd()
setwd('C:/Users/kmada/OneDrive - Onslow County Schools/3. ST 558/6a. Projects/Project1')
url <- "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers"
query_list <- list(apiKey =
Sys.getenv("API_KEY"))
my_data <- GET(url, query = query_list)
parsed <- fromJSON(rawToChar(my_data$content))
options <- as.data.frame(parsed$tickers)
options <- options %>% unnest('day')
options <- rename(options,
Day_Open_Price = o,
Day_High_Price = h,
Day_Low_Price = l,
Day_Close_Price = c,
d1 = v,
d2 = vw)
options <- options %>% unnest('prevDay')
options <- rename(options,
Prev_Open_Price = o,
Prev_High_Price = h,
Prev_Low_Price = l,
Prev_Close_Price = c,
PerChange_Since_Prev =
todaysChangePerc,
ValChange_Sine_Prev = todaysChange,
d3 = v,
d4 = vw)
options <- options %>% unnest('min')
options <- as_tibble(options[-c(4, 9:18, 23:24)])
names <- read.csv("company_names.csv")
names <- rename(names, ticker = Symbol,
name = Name)
names <- as_tibble(names[-c(3:5)])
options <- merge(options, names, by = 'ticker')
options <- options[c(1, 12, 2:11)]
if (company != "all"){
if (toupper(company) %in% options$ticker){
options <- options %>%
filter(ticker == toupper(company))
}
else if (toupper(company) %in% options$Name){
output <- options %>%
filter(Name == toupper(company))
}
# Otherwise, throw an informative error.
else {
message <- paste('ERROR: Argument for company was
not found in the ticker or the
name column. Returning all
companies.')
}
}
# Do nothing if the company value equals "all".
else {
output <- as.data.frame(options)
# Return the output data.frame.
return(output)
}
}
c <- company_quan()
getwd()
getwd()
render('Project 1.Rmd', output_format = 'github_document',
output_file = 'README.md', output_dir = "C:/Users/kmada/OneDrive - Onslow County Schools/3. ST 558/6a. Projects/Project1/_includes')
render('Project 1.Rmd', output_format = 'github_document',
output_file = 'README.md', output_dir = 'C:/Users/kmada/OneDrive - Onslow County Schools/3. ST 558/6a. Projects/Project1/_includes')
